// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RPPP_WebApp.Models
{
    public partial class RPPP05Context : DbContext
    {
        

        public RPPP05Context(DbContextOptions<RPPP05Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Autoceste> Autoceste { get; set; }
        public virtual DbSet<Cjenik> Cjenik { get; set; }
        public virtual DbSet<Dionice> Dionice { get; set; }
        public virtual DbSet<Encpostaja> Encpostaja { get; set; }
        public virtual DbSet<Kamere> Kamere { get; set; }
        public virtual DbSet<Koncesionari> Koncesionari { get; set; }
        public virtual DbSet<Multimedija> Multimedija { get; set; }
        public virtual DbSet<NaplatnaPostaja> NaplatnaPostaja { get; set; }
        public virtual DbSet<Obavijesti> Obavijesti { get; set; }
        public virtual DbSet<Objekt> Objekt { get; set; }
        public virtual DbSet<Odmoriste> Odmoriste { get; set; }
        public virtual DbSet<OdrzavanjeObjekta> OdrzavanjeObjekta { get; set; }
        public virtual DbSet<ParkGospVoz> ParkGospVoz { get; set; }
        public virtual DbSet<RadnoVrijeme> RadnoVrijeme { get; set; }
        public virtual DbSet<Sadrzaj> Sadrzaj { get; set; }
        public virtual DbSet<Slike> Slike { get; set; }
        public virtual DbSet<TipOdrzavanja> TipOdrzavanja { get; set; }
        public virtual DbSet<TipSadrzaja> TipSadrzaja { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Autoceste>(entity =>
            {
                entity.HasKey(e => e.Oznaka);

                entity.Property(e => e.Oznaka)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Koncesionar)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kraj)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pocetak)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.KoncesionarNavigation)
                    .WithMany(p => p.Autoceste)
                    .HasForeignKey(d => d.Koncesionar)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Koncesija");
            });

            modelBuilder.Entity<Cjenik>(entity =>
            {
                entity.HasKey(e => new { e.UlazId, e.IzlazId });

                entity.Property(e => e.UlazId).HasColumnName("UlazID");

                entity.Property(e => e.IzlazId).HasColumnName("IzlazID");

                entity.Property(e => e.CijenaI).HasColumnName("cijenaI");

                entity.Property(e => e.CijenaIa).HasColumnName("cijenaIA");

                entity.Property(e => e.CijenaIi).HasColumnName("cijenaII");

                entity.Property(e => e.CijenaIii).HasColumnName("cijenaIII");

                entity.Property(e => e.CijenaIv).HasColumnName("cijenaIV");

                entity.HasOne(d => d.Izlaz)
                    .WithMany(p => p.CjenikIzlaz)
                    .HasForeignKey(d => d.IzlazId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cjenik_IzlaznaNaplatna");

                entity.HasOne(d => d.Ulaz)
                    .WithMany(p => p.CjenikUlaz)
                    .HasForeignKey(d => d.UlazId)
                    .HasConstraintName("FK_Cjenik_UlaznaNaplatna");
            });

            modelBuilder.Entity<Dionice>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.OznakaAutoceste)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.IzlaznaPostajaNavigation)
                    .WithMany(p => p.DioniceIzlaznaPostajaNavigation)
                    .HasForeignKey(d => d.IzlaznaPostaja)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("DionicaIzlaznaPostaja");

                entity.HasOne(d => d.OznakaAutocesteNavigation)
                    .WithMany(p => p.Dionice)
                    .HasForeignKey(d => d.OznakaAutoceste)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("DionicaAutocesta");

                entity.HasOne(d => d.UlaznaPostajaNavigation)
                    .WithMany(p => p.DioniceUlaznaPostajaNavigation)
                    .HasForeignKey(d => d.UlaznaPostaja)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("DionicaUlaznaPostaja");
            });

            modelBuilder.Entity<Encpostaja>(entity =>
            {
                entity.HasKey(e => e.Encid);

                entity.ToTable("ENCPostaja");

                entity.HasIndex(e => e.KontaktBroj, "UQ__ENCPosta__A63E5C507F80115A")
                    .IsUnique();

                entity.HasIndex(e => e.NaplatnaId, "idx_NaplatnaId")
                    .IsUnique()
                    .HasFilter("([NaplatnaId] IS NOT NULL)");

                entity.Property(e => e.Encid).HasColumnName("ENCID");

                entity.Property(e => e.Ime)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KontaktBroj)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NaplatnaId).HasColumnName("NaplatnaID");

                entity.Property(e => e.NaplatnaStaza).HasColumnName("naplatnaStaza");

                entity.HasOne(d => d.Naplatna)
                    .WithOne(p => p.Encpostaja)
                    .HasForeignKey<Encpostaja>(d => d.NaplatnaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__ENCPostaj__Napla__6B24EA82");
            });

            modelBuilder.Entity<Kamere>(entity =>
            {
                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Dionica)
                    .WithMany(p => p.Kamere)
                    .HasForeignKey(d => d.DionicaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_3");
            });

            modelBuilder.Entity<Koncesionari>(entity =>
            {
                entity.HasKey(e => e.NazivKoncesionara);

                entity.Property(e => e.NazivKoncesionara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Multimedija>(entity =>
            {
                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Odmoriste)
                    .WithMany(p => p.Multimedija)
                    .HasForeignKey(d => d.OdmoristeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Multimedi__Odmor__3F466844");
            });

            modelBuilder.Entity<NaplatnaPostaja>(entity =>
            {
                entity.HasKey(e => e.NaplatnaId)
                    .HasName("PK__Naplatna__5077080D60EE09A1");

                entity.HasIndex(e => e.Ime, "UQ_NaplatnaPostaja")
                    .IsUnique();

                entity.HasIndex(e => e.GeoDuzina, "geoDuzina_NaplatnaPostaja")
                    .IsUnique();

                entity.HasIndex(e => e.GeoSirina, "geoSirina_NaplatnaPostaja")
                    .IsUnique();

                entity.Property(e => e.NaplatnaId).HasColumnName("NaplatnaID");

                entity.Property(e => e.Ime)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Obavijesti>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Naslov)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Opis)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.VrijemeObjave)
                    .IsRequired()
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdDioniceNavigation)
                    .WithMany(p => p.Obavijesti)
                    .HasForeignKey(d => d.IdDionice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DionicaObavijest");
            });

            modelBuilder.Entity<Objekt>(entity =>
            {
                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Opis).IsUnicode(false);

                entity.Property(e => e.TipObjekta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Dionica)
                    .WithMany(p => p.Objekt)
                    .HasForeignKey(d => d.DionicaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_1");
            });

            modelBuilder.Entity<Odmoriste>(entity =>
            {
                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Opis).IsUnicode(false);

                entity.Property(e => e.Smjer)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Dionica)
                    .WithMany(p => p.Odmoriste)
                    .HasForeignKey(d => d.DionicaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OdmoristeDionica");
            });

            modelBuilder.Entity<OdrzavanjeObjekta>(entity =>
            {
                entity.Property(e => e.Datum).HasColumnType("date");

                entity.Property(e => e.Ishod)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Odrzavatelj)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Opis).IsUnicode(false);

                entity.HasOne(d => d.Objekt)
                    .WithMany(p => p.OdrzavanjeObjekta)
                    .HasForeignKey(d => d.ObjektId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ObjektId");

                entity.HasOne(d => d.Tip)
                    .WithMany(p => p.OdrzavanjeObjekta)
                    .HasForeignKey(d => d.TipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipId");
            });

            modelBuilder.Entity<ParkGospVoz>(entity =>
            {
                entity.HasKey(e => e.ParkingId)
                    .HasName("PK__ParkGosp__513B6E6B19AA2FE1");

                entity.Property(e => e.ParkingId).HasColumnName("parkingID");

                entity.Property(e => e.BrojMjesta).HasColumnName("brojMjesta");

                entity.Property(e => e.CijenaPoSatu).HasColumnName("cijenaPoSatu");

                entity.Property(e => e.DionicaId).HasColumnName("dionicaID");

                entity.Property(e => e.GeoDuzinaUlaz).HasColumnName("geoDuzinaUlaz");

                entity.Property(e => e.GeoSirinaUlaz).HasColumnName("geoSirinaUlaz");

                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("naziv");

                entity.Property(e => e.Stacionaža).HasColumnName("stacionaža");

                entity.Property(e => e.StranaCesteUlaz)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("stranaCesteUlaz");

                entity.HasOne(d => d.Dionica)
                    .WithMany(p => p.ParkGospVoz)
                    .HasForeignKey(d => d.DionicaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ParkingDionica");
            });

            modelBuilder.Entity<RadnoVrijeme>(entity =>
            {
                entity.HasKey(e => new { e.SadrzajId, e.Dan })
                    .HasName("PK__RadnoVri__BF580359CFFDB5BA");

                entity.Property(e => e.VrijemePocetka).HasColumnType("time(0)");

                entity.Property(e => e.VrijemeZavrsetka).HasColumnType("time(0)");

                entity.HasOne(d => d.Sadrzaj)
                    .WithMany(p => p.RadnoVrijeme)
                    .HasForeignKey(d => d.SadrzajId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RadnoVrij__Sadrz__4222D4EF");
            });

            modelBuilder.Entity<Sadrzaj>(entity =>
            {
                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Odmoriste)
                    .WithMany(p => p.Sadrzaj)
                    .HasForeignKey(d => d.OdmoristeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Sadrzaj__Odmoris__3C69FB99");

                entity.HasOne(d => d.TipSadrzaja)
                    .WithMany(p => p.Sadrzaj)
                    .HasForeignKey(d => d.TipSadrzajaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Sadrzaj__TipSadr__3B75D760");
            });

            modelBuilder.Entity<Slike>(entity =>
            {
                entity.HasKey(e => new { e.Datum, e.KameraId });

                entity.Property(e => e.Datum).HasColumnType("date");

                entity.Property(e => e.Smjer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.HasOne(d => d.Kamera)
                    .WithMany(p => p.Slike)
                    .HasForeignKey(d => d.KameraId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_2");
            });

            modelBuilder.Entity<TipOdrzavanja>(entity =>
            {
                entity.Property(e => e.Naziv)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipSadrzaja>(entity =>
            {
                entity.Property(e => e.Naziv)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}